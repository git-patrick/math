I WROTE A table CLASS MOSTLY FOR SOLVING SYSTEMS OF EQUATIONS.  I generalized my row_reduce algorithm from matrix
and put it into algorithm.h  -- I need to make matrix compatible with this row_reduce function.
thinking of changing matrix to class matrix : public std::array<std::array<Type, M>, N>
to provide similar iterators to table in terms of begin() and end() ...
not sure, we shall see.

I changed table quite a bit, added support for functors which process the array data and produce
values that the new table_row class stores with the array data.
this means I will probably be changing the implementation of my row_reduce algorithm.


Fix up the derivative.h implementation.  don't need all those aliases.
compile time indefinite intregrals of analytic functions!
compile time evaluation of functors with constant functor input (ie, exp<rational<3,2>> should evaluate to a rational<...>)
	the only real way to do this without losing an precision along the way is to come up with a replacement for std::ratio
	that has better precision than all floating point types that might be used, and use that in math::analytic::complex
	then I would need to write compile time implementations of all the basic functions ... exp, sin, ln, etc etc...
	the work required to make this happen might outweigh the benefit though.
	
higher order numeric derivatives.

PERMUTATIONS (symmetric group)
TOPOLOGY

GROUP DIAGRAMS
FUNCTION PLOTTING


ALGORITHMIC PROCESSES
----------------------------
ISO SURFACE FINDER
LIMITS
MIN/MAX FINDER OVER A VOLUME
OPTIONS FOR MAKING THE NUMERIC INTEGRAL MORE ACCURATE,
complex integral

taylor expansion

the infinitesimal values in infinitesimal_tag cast operators were basically pulled out of a hat.
I need to think about them and choose logically.

	DERIVATIVE / COMPLEX DERIVATIVE X
	dihedral group  X
	symmetric group
	function description X
	derivative X
	compile time creation of analytic / holomorphic function - partially complete

	determinant of my matrix class, going to use symmetric group permutations.
	inverse of matrix class - going to use determinant

	limits
	
	
	
things I really want to get to:
	really want to go over manifolds and more topology



fix the iterator adjuster / iterator.h / iterator_range.h stuff.